resp <- httr::GET("https://rickandmortyapi.com/api/character")
resp
library(httr)
content(resp)
content(resp)4info
content(resp)$info
# get all characters pagination example
resp <- httr::GET("https://rickandmortyapi.com/api/character",
query = list("page" = 25))
content(resp)
content(resp)$info$`next`[1]
content(resp)$info$`next`[1] == NULL
content(resp)$info$`next`[1] == TRUE
content(resp)$info$`next`[1] == FALSE
content(resp)$info$`next`[1] == "hello"
content(resp)$info$`next`[1] == ""
resp <- httr::GET("https://rickandmortyapi.com/api/character")
content(resp)$info
content(resp)$info$pages
typeof(content(resp)$info$pages)
length(content(resp)$info$pages)
uninstall_theme()
rscodeio::uninstall_theme()
rscodeio::install_theme()
rscodeio::uninstall_theme()
rscodeio::install_theme()
# get all characters pagination example
resp <- httr::GET("https://rickandmortyapi.com/api/character",
query = list("page" = 25))
resp
library(httr)
content(resp)
parsed_content <- jsonlite::fromJSON(httr::content(resp,
as = "text",
encoding = "UTF-8"
)
)
parsed_content
parsed_content <- jsonlite::fromJSON(httr::content(resp,
as = "text",
encoding = "UTF-8"
),
flatten = TRUE
)
parsed_content
tibbled_content <- tibble::as_tibble(parsed_content$results)
tibbled_content
tibbled_content$type
parsed_content
# get all locations
resp_loc <- httr::GET("https://rickandmortyapi.com/api/location")
content(resp_loc)
parsed_content <- jsonlite::fromJSON(httr::content(resp_loc,
as = "text",
encoding = "UTF-8"
),
flatten = TRUE
)
parsed_content
tibbled_content <- tibble::as_tibble(parsed_content$results)
return(tibbled_content)
tibbled_content
# get all characters pagination example
resp <- httr::GET("https://rickandmortyapi.com/api/character")
parsed_content <- jsonlite::fromJSON(httr::content(resp,
as = "text",
encoding = "UTF-8"
),
flatten = TRUE
)
tibbled_content <- tibble::as_tibble(parsed_content$results)
parsed_content
content(resp)$info$`next`
content(resp)$info$pages
content(resp)$info$`next`
content(resp)$info
resp <- httr::GET("https://rickandmortyapi.com/api/character")
resp
# Define api parse function
parse_resp <- function(resp) {
if (httr::http_type(resp) != "application/json") {
stop("API did not return json", call. = FALSE)
}
if (httr::http_error(resp) == TRUE) {
warning("The request failed")
} else {
parsed_content <- jsonlite::fromJSON(httr::content(resp,
as = "text",
encoding = "UTF-8"
),
flatten = TRUE
)
tibbled_content <- tibble::as_tibble(parsed_content$results)
return(tibbled_content)
}
}
resp <- httr::GET("https://rickandmortyapi.com/api/character")
parse_resp(resp)
page_1 <- parse_resp(resp)
page_1
# Define api parse function
parse_resp <- function(resp) {
if (httr::http_type(resp) != "application/json") {
stop("API did not return json",
call. = FALSE)
}
if (httr::http_error(resp) == TRUE) {
warning("The request failed")
} else {
parsed_content <- jsonlite::fromJSON(httr::content(resp,
as = "text",
encoding = "UTF-8"
),
flatten = TRUE
)
tibbled_content <- tibble::as_tibble(parsed_content$results)
return(tibbled_content)
}
}
content(resp)$info$`next`
?while
?while
?while()
?while
session_info()
library(glue)
content(resp)$info$`next
``
content(resp)$info$`next``
content(resp)$info$`next`
paste(content(resp)$info$`next`)
paste0('"', content(resp)$info$`next`, '"')
a
# Define api parse function
parse_resp <- function(resp) {
if (httr::http_type(resp) != "application/json") {
stop("API did not return json",
call. = FALSE)
}
if (httr::http_error(resp) == TRUE) {
warning("The request failed")
} else {
parsed_content <- jsonlite::fromJSON(httr::content(resp,
as = "text",
encoding = "UTF-8"
),
flatten = TRUE
)
tibbled_content <- tibble::as_tibble(parsed_content$results)
return(tibbled_content)
}
}
# GET and parse first page of results
resp <- httr::GET("https://rickandmortyapi.com/api/character")
all_chars <- parse_resp(resp)
all_chars
resp <- httr::GET(paste(httr::content(resp)$info$`next`))
resp
all_chars_2 <- parse_rep(resp)
all_chars_2 <- parse_resp(resp)
all_chars_2
httr::content(resp)$info$`next` != ""
!(httr::content(resp)$info$`next`) == ""
?bind_rows
??bind_rows
dplyr::bind_rows()
?dplyr::bind_rows()
?rbind
ls()
# Define api parse function
parse_resp <- function(resp) {
if (httr::http_type(resp) != "application/json") {
stop("API did not return json",
call. = FALSE)
}
if (httr::http_error(resp) == TRUE) {
warning("The request failed")
} else {
parsed_content <- jsonlite::fromJSON(httr::content(resp,
as = "text",
encoding = "UTF-8"
),
flatten = TRUE
)
tibbled_content <- tibble::as_tibble(parsed_content$results)
return(tibbled_content)
}
}
# GET and parse first page of results
resp <- httr::GET("https://rickandmortyapi.com/api/character")
all_chars <- parse_resp(resp)
httr::content(resp)$info$`next` != ""
resp <- httr::GET(paste(httr::content(resp)$info$`next`))
parsed <- parse_resp(resp)
parsed
tibble::tibble(a = c(1, 2), b = c(3, 4))
tib1 <- tibble::tibble(a = c(1, 2), b = c(3, 4))
tib1
tib1 <- tibble::tibble(a = c(5, 6), b = c(7, 8))
tib1 <- tibble::tibble(a = c(1, 2), b = c(3, 4))
tib2 <- tibble::tibble(a = c(5, 6), b = c(7, 8))
tib1
tib2
rbind(tib1, tib2)
all_chars <- rbind(all_chars, next_page)
next_page <- parse_resp(resp)
next_page
all_chars <- rbind(all_chars, next_page)
all_chars
resp <- httr::GET(paste(httr::content(resp)$info$`next`))
next_page <- parse_resp(resp)
all_chars <- rbind(all_chars, next_page)
all_chars
ls()
parse_resp <- function(resp) {
if (httr::http_type(resp) != "application/json") {
stop("API did not return json",
call. = FALSE)
}
if (httr::http_error(resp) == TRUE) {
warning("The request failed")
} else {
parsed_content <- jsonlite::fromJSON(httr::content(resp,
as = "text",
encoding = "UTF-8"
),
flatten = TRUE
)
tibbled_content <- tibble::as_tibble(parsed_content$results)
return(tibbled_content)
}
}
# Get all characters
# GET and parse first page of results
resp <- httr::GET("https://rickandmortyapi.com/api/character")
all_chars <- parse_resp(resp)
# GET and parse all remaining pages, appending to all_chars tibble
while(httr::content(resp)$info$`next` != ""){
resp <- httr::GET(paste(httr::content(resp)$info$`next`))
next_page <- parse_resp(resp)
all_chars <- rbind(all_chars, next_page)
}
all_chars
all_chars %>% print(n = Inf)
library(migrittr)
library(magrittr)
all_chars %>% print(n = Inf)
# Define api parse function
parse_resp <- function(resp) {
if (httr::http_type(resp) != "application/json") {
stop("API did not return json",
call. = FALSE)
}
if (httr::http_error(resp) == TRUE) {
warning("The request failed")
} else {
parsed_content <- jsonlite::fromJSON(httr::content(resp,
as = "text",
encoding = "UTF-8"
),
flatten = TRUE
)
tibbled_content <- tibble::as_tibble(parsed_content$results)
return(tibbled_content)
}
}
get_characters <- function() {
# GET and parse first page of results
resp <- httr::GET("https://rickandmortyapi.com/api/character")
all_chars <- parse_resp(resp)
# GET and parse all remaining pages, appending to all_chars tibble
while(httr::content(resp)$info$`next` != ""){
resp <- httr::GET(paste(httr::content(resp)$info$`next`))
next_page <- parse_resp(resp)
all_chars <- rbind(all_chars, next_page)
}
}
get_characters
get_characters()
chars <- get_characters()
chars
??while
# Define api parse function
parse_resp <- function(resp) {
if (httr::http_type(resp) != "application/json") {
stop("API did not return json",
call. = FALSE)
}
if (httr::http_error(resp) == TRUE) {
warning("The request failed")
} else {
parsed_content <- jsonlite::fromJSON(httr::content(resp,
as = "text",
encoding = "UTF-8"
),
flatten = TRUE
)
tibbled_content <- tibble::as_tibble(parsed_content$results)
return(tibbled_content)
}
}
# GET and parse first page of results
resp <- httr::GET("https://rickandmortyapi.com/api/character")
all_chars <- parse_resp(resp)
while(httr::content(resp)$info$`next` != ""){
resp <- httr::GET(paste(httr::content(resp)$info$`next`))
next_page <- parse_resp(resp)
all_chars <- rbind(all_chars, next_page)
}
all_chars
# Define api parse function
parse_resp <- function(resp) {
if (httr::http_type(resp) != "application/json") {
stop("API did not return json",
call. = FALSE)
}
if (httr::http_error(resp) == TRUE) {
warning("The request failed")
} else {
parsed_content <- jsonlite::fromJSON(httr::content(resp,
as = "text",
encoding = "UTF-8"
),
flatten = TRUE
)
tibbled_content <- tibble::as_tibble(parsed_content$results)
return(tibbled_content)
}
}
get_characters <- function() {
# GET and parse first page of results
resp <- httr::GET("https://rickandmortyapi.com/api/character")
all_chars <- parse_resp(resp)
# GET and parse all remaining pages, appending to all_chars tibble
while(httr::content(resp)$info$`next` != ""){
resp <- httr::GET(paste(httr::content(resp)$info$`next`))
next_page <- parse_resp(resp)
all_chars <- rbind(all_chars, next_page)
}
return(all_chars)
}
get_characters()
# Get all locations
get_locations <- function() {
# GET and parse first page of results
resp <- httr::GET("https://rickandmortyapi.com/api/location")
all_locs <- parse_resp(resp)
# GET and parse all remaining pages, appending to all_chars tibble
while(httr::content(resp)$info$`next` != ""){
resp <- httr::GET(paste(httr::content(resp)$info$`next`))
next_page <- parse_resp(resp)
all_locs <- rbind(all_locs, next_page)
}
return(all_locs)
}
locations <- get_locations()
locations
# Get all episodes
get_episodes <- function() {
# GET and parse first page of results
resp <- httr::GET("https://rickandmortyapi.com/api/episode")
all_eps <- parse_resp(resp)
# GET and parse all remaining pages, appending to all_chars tibble
while(httr::content(resp)$info$`next` != ""){
resp <- httr::GET(paste(httr::content(resp)$info$`next`))
next_page <- parse_resp(resp)
all_eps <- rbind(all_eps, next_page)
}
return(all_eps)
}
episodes <- get_episodes()
episodes
print(episodes, n = Inf)
get_characters(n = 10)
resp <- httr::GET("https://rickandmortyapi.com/api/characte4354r")
resp
all_chars <- parse_resp(resp)
all_chars
# Define api parse function
parse_resp <- function(resp) {
if (httr::http_type(resp) != "application/json") {
stop("API did not return json",
call. = FALSE)
}
if (httr::http_error(resp) == TRUE) {
stop("The request failed")
} else {
parsed_content <- jsonlite::fromJSON(httr::content(resp,
as = "text",
encoding = "UTF-8"
),
flatten = TRUE
)
tibbled_content <- tibble::as_tibble(parsed_content$results)
return(tibbled_content)
}
}
parse_resp(resp)
all_chars <- parse_resp(resp)
all_chars
devtools::load_all(".")
mortyr::get_characters()
usethis::use_testthat()
?expect_is
tib <- tibble::tibble(1, 2, 3)
tib
type(tib)
typeof(tib)
class(tib)
?is_tibble
is_tibble
tibble::is_tibble(tib)
devtools::load_all(".")
all_chars
expect_type(get_characters(), "list")
expect_true(tibble::is_tibble(get_characters()))
expect_type(all_chars, "list")
expect_type(all_chars, "list")
locs <- get_locations()
loc
locs
na.omit(locs)
nrow(locs)
characters <- get_characters()
locations <- get_locations()
episodes <- get_episodes()
test_that("tibbles are returned", {
expect_type(locations, "list")
expect_type(episodes, "list")
expect_true(tibble::is_tibble(characters)
expect_true(tibble::is_tibble(episodes)
})
test_that("tibbles are returned", {
expect_type(characters, "list")
expect_type(locations, "list")
expect_type(episodes, "list")
expect_true(tibble::is_tibble(characters)
expect_true(tibble::is_tibble(locations)
expect_true(tibble::is_tibble(episodes)
})
nrow(locs)
ncol(rows)
ncol(locs)
usethis::use_package(tibble)
usethis::use_package("tibble")
usethis::use_package("httr")
usethis::use_package("jsonlite")
usethis::use_readme_rmd()
devtools::load_all(".")
?mortyr::get_characters
?mortyr::get_locations
?mortyr::get_episodes
devtools::load_all(".")
library(mortyr)
library(mortyr)
get_characters()
get_locations()
get_episodes()
library(mortyr)
devtools::load_all(".")
devtools::load_all(".")
get_characters()
library(mortyr)
devtools::load_all(".")
chars <- mortyr::get_characters()
chars
colnames(chars)
locs <- mortyr::get_locations()
locs
colnames(locs)
eps <- mortyr::get_episodes()
colnames(eps)
devtools::load_all(".")
library(mortyr)
?get_episodes
?get_locations
?get_characters
getwd()
spelling::spell_check_package("/home/mike/Documents/projects/r_projects/mortyr")
use_mit_license("Michael Page")
usethis::use_travis()
devtools::load_all(".")
library(mortyr)
get_characters()
getwd()
knitr::render("/home/mike/Documents/projects/r_projects/mortyr/README.Rmd")
knitr::render_markdown("/home/mike/Documents/projects/r_projects/mortyr/README.Rmd")
